// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model UserPet {
  id                Int                @id @default(autoincrement())
  idCognito         String             @unique
  pets              Pet[]    
  adoptionRequests  AdoptionRequest[]  
}

model Pet {
  id                Int                @id @default(autoincrement())
  name              String
  type              String
  gender            String
  age               Int
  special_condition String?            @default("Nenhuma")
  adoption          Boolean            @default(true)
  like              Int                @default(0)
  createdAt         DateTime           @default(now())
  
  userPetId         Int         
  userPet           UserPet            @relation(fields: [userPetId], references: [id], onDelete: Cascade)

  address           PetAddress?
  images            PetImage[] 
  adoptionRequests  AdoptionRequest[]
}

model PetImage {
  id         Int      @id @default(autoincrement())
  fileName   String
  avatarPath Boolean  
  path       String
  createdAt  DateTime @default(now())

  petId      Int     
  pet        Pet      @relation(fields: [petId], references: [id], onDelete: Cascade)
}

model PetAddress {
  id         Int      @id @default(autoincrement())
  zipCode    String 
  address    String 
  number     Int
  complement String
  district   String
  state      String
  createdAt  DateTime @default(now())

  petId      Int      @unique 
  pet        Pet      @relation(fields: [petId], references: [id], onDelete: Cascade)
}

model AdoptionRequest {
  id           Int             @id @default(autoincrement())
  pet          Pet             @relation(fields: [petId], references: [id], onDelete: Cascade)
  petId        Int
  requester    UserPet         @relation(fields: [requesterId], references: [idCognito], onDelete: Cascade)
  requesterId  String
  status       AdoptionStatus  @default(PENDING)
  createdAt    DateTime        @default(now())
}

enum AdoptionStatus {
  PENDING
  APPROVED
  REJECTED
}
